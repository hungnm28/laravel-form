<?php

namespace Modules\DumpMyModuleName\Http\Livewire\Permissions;

use App\Models\Permission;
use Hungnm28\LaravelForm\Traits\WithLaravelFormTrait;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Str;
use Livewire\Component;

class   Create extends Component
{
    use WithLaravelFormTrait;

    public $name, $label, $parent_id=0, $module, $type= 'page',$methods=[],
        $methods_params=["listing"=>"Listing","create"=>"Create","edit"=>"Edit","show"=>"Show","delete"=>"Delete"];
    protected $queryString =['module'];
    protected $rules = [
        'name' => 'string|required',
		'label' => 'string|required',
		'type' => 'string|required|in:page,method',
    ];

    public function mount()
    {
        $this->authorize("DumpMyRouteName.permissions.create");
        $this->done = 1;
    }

    public function updated($field)
    {
        $this->validateOnly($field);
    }

    public function updatedName(){
        if($this->type =="page"){
            $this->methods = ["listing","create","edit","show","delete"];
        }else{
            $this->methods=[];
        }
    }

    public function updatedType(){
        if($this->type =="page"){
            $this->methods = ["listing","create","edit","show","delete"];
        }else{
            $this->methods=[];
        }
    }

    public function store()
    {
        $this->authorize("DumpMyRouteName.permissions.create");
        $this->validate();
        $data = Permission::create([
            'name' => $this->name,
			'label' => $this->label,
			'parent_id' => $this->parent_id,
			'type' => $this->type,

        ]);
        if ($data) {
            if($data->type =="page"){
                foreach($this->methods as $method){
                    $data->children()->create([
                        "name"=>$data->name . ".$method"
                        ,"label"=>data_get($this->methods_params,$method,"")
                        ,"type"=>"method"
                    ]);
                }
            }
            $this->redirectForm("DumpMyRouteName.permissions", $data->id);
        }
    }

    public function render()
    {
        lForm()->setTitle("Permissions");
        lForm()->pushBreadcrumb(route("DumpMyRouteName"),"Admin");
		lForm()->pushBreadcrumb(route("DumpMyRouteName.permissions"),"Permissions");
		lForm()->pushBreadcrumb(route("DumpMyRouteName.permissions.create"),"Create");

        $permissions = [''=>'Chọn Permission'];
        $allPermission  = Permission::get();
        $prefix = "DumpMyRouteName";
        foreach(Route::getRoutes()->getRoutes() as $route){
            $name = data_get($route->getAction(),"as");
            if(strpos(" ".$name,$prefix)){
                $middlewares = data_get($route->getAction(),"middleware",[]);
                foreach($middlewares as $mid){
                    if(strpos(" ".$mid,"can:")){
                        $mid = Str::after($mid,'can:');
                        if(!$allPermission->contains("name",$mid)){
                            $permissions[$mid] = $mid;
                        }
                    }
                }
            }
        }
        $permissions = Arr::sort($permissions);
        $parents = Permission::whereType('page')->get()->pluck("label","id");

        return view("DumpMyModuleView::livewire.permissions.create",compact("permissions","parents"))
            ->layout('DumpMyModuleView::layouts.master');
    }
}
